/*
 * @Author: Dreamy Icecream 
 * @Date: 2020-06-18 15:35:19 
 * @Description: 从特定位置开始消融
 */

CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: vs:vert
      frag: fs:frag
      properties: &props
        mainTexture:         { value: white, editor: { displayName: "主材质", type: sampler2D } }
        noiseTexture:        { value: grey, editor: { displayName: "噪点材质", type: sampler2D } }
        rampTexture:         { value: white, editor: { displayName: "渐变材质", type: sampler2D } }
        worldStartPosition:  { value: [0, 0, 0, 0], editor: { displayName: "消融起始位置", type: vec4 } }
        threshold:           { value: 0.5, editor: { displayName: "控制阈值", type: float } }
        edgeLength:          { value: 0.03, editor: { displayName: "边界宽度控制", type: float } }
        maxDistance:         { value: 10, editor: { displayName: "起始点到模型最远定点的距离", type: float } }
        distanceEffect:      { value: 0.5, editor: { displayName: "距离消融程度控制", type: float } }
}%

CCProgram vs %{
  precision highp float;

  #include <input-standard>
  #include "../../Util/Util"

  uniform VertexData{
    vec4 worldStartPosition;
  };

  in vec2 a_texCoord;

  out vec4 objectPosition;
  out vec4 objectStartPosition;
  out vec4 uv;

  vec4 vert(){
    StandardVertInput vertex;
    CCVertInput(vertex);

    uv.xy = a_texCoord;
    uv.zw = a_texCoord;

    objectPosition = vertex.position;
    objectStartPosition = worldToObject(worldStartPosition);

    return objectToClipPos(vertex.position);
  }

}%

CCProgram fs %{
  precision highp float;

  uniform sampler2D mainTexture;
  uniform sampler2D noiseTexture;
  uniform sampler2D rampTexture;

  uniform FragmentData{
    float threshold;
    float edgeLength;
    float maxDistance;
    float distanceEffect;
  };

  in vec4 uv;
  in vec4 objectPosition;
  in vec4 objectStartPosition;

  vec4 frag(){
    float dist = smoothstep(0.0, 1.0, length(objectPosition - objectStartPosition) / maxDistance);
    float cutoff = mix(texture(noiseTexture, uv.zw).r, dist, distanceEffect);
    if(cutoff <= threshold){
      discard;
    }

    float degree = min(1.0, (cutoff - threshold) / edgeLength);

    vec4 edgeColor = texture(rampTexture, vec2(degree, degree));
    vec4 orgColor = texture(mainTexture, uv.xy);

    return vec4(mix(edgeColor, orgColor, degree).rgb, 1.0);
  }

}%