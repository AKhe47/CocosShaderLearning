/*
 * @Author: Dreamy Icecream 
 * @Date: 2020-05-30 11:28:01 
 * @Description: 工具方法集合
 */

#include <cc-global>
#include <cc-local>

#define iResolution cc_screenSize
#define iTime cc_time.x
#define iTimeDelta cc_time.y
#define iFrame cc_time.z

// shadertoy template
void mainImage (out vec4 fragColor, in vec2 fragCoord) {
  // Normalized pixel coordinates (from 0 to 1)
  vec2 uv = fragCoord / iResolution.xy;
  // Time varying pixel color
  vec3 col = 0.5 + 0.5 * cos(iTime + uv.xyx + vec3(0, 2, 4));
  // Output to screen
  fragColor = vec4(col, 1.0);
}

/** 通过模型空间的坐标，得到剪裁空间的顶点坐标 */
vec4 objectToClipPos(vec4 a_Position){
  return cc_matProj * (cc_matView * cc_matWorld) * a_Position;
}

/** 得到环境光 */
vec4 getAmbient(){
  return cc_ambientSky + cc_ambientGround;
}

/** 将模型坐标下的矢量转化为世界坐标 */
vec4 getWorldVec4(vec4 objectVector){
  return cc_matWorld * vector;
}