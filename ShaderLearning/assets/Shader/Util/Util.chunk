/*
 * @Author: Dreamy Icecream 
 * @Date: 2020-05-30 11:28:01 
 * @Description: 工具方法集合
 */

#include <cc-global>
#include <cc-local>
#include <input-standard>

#define iResolution cc_screenSize
#define iTime cc_time.x
#define iTimeDelta cc_time.y
#define iFrame cc_time.z

// shadertoy template
void mainImage (out vec4 fragColor, in vec2 fragCoord) {
  // Normalized pixel coordinates (from 0 to 1)
  vec2 uv = fragCoord / iResolution.xy;
  // Time varying pixel color
  vec3 col = 0.5 + 0.5 * cos(iTime + uv.xyx + vec3(0, 2, 4));
  // Output to screen
  fragColor = vec4(col, 1.0);
}

/** 通过模型空间的坐标，得到剪裁空间的顶点坐标 */
vec4 objectToClipPos(vec4 a_Position){
  return cc_matProj * (cc_matView * cc_matWorld) * a_Position;
}

/** 得到环境光 */
vec4 getAmbient(){
  return cc_ambientSky + cc_ambientGround;
}

/** 将模型坐标下的矢量转化为世界坐标 */
vec4 objectToWorld(vec4 objectVector){
  return cc_matWorld * objectVector;
}

/** 得到从模型空间转换到切线空间的转换矩阵 */
mat3 getTangentSpaceRotation(StandardVertInput v){
  vec3 binormal = cross(normalize(v.normal), normalize(v.tangent.xyz)) * v.tangent.w;
  return mat3(v.tangent.xyz, binormal, v.normal);
}

/** 解压法线图，得到对应法线 */
vec3 unpackNormal(vec4 packedNormal, float normalScale){
  vec3 normal;
  normal.xy = (packedNormal.xy * 2.0 - 1.0) * normalScale;
  normal.z = sqrt(1.0 - dot(packedNormal.xy, packedNormal.xy));
  return normal; 
}

/** 得到转换之后的uv坐标 */
vec2 transformTex(vec2 uv, vec4 texST){
  return uv * texST.xy + texST.zw;
}